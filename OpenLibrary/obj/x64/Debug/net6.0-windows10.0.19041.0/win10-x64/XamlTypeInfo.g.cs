//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace OpenLibrary
{
    public partial class App : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2309")]
        private global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2309")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2309")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2309")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2309")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace OpenLibrary.OpenLibrary_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2309")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2309")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[25];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "OpenLibrary.MainWindow";
            _typeNameTable[5] = "Microsoft.UI.Xaml.Window";
            _typeNameTable[6] = "OpenLibrary.ViewModels.DetailsViewModel";
            _typeNameTable[7] = "CommunityToolkit.Mvvm.ComponentModel.ObservableObject";
            _typeNameTable[8] = "OpenLibrary.Models.Book";
            _typeNameTable[9] = "OpenLibrary.Views.Details";
            _typeNameTable[10] = "Microsoft.UI.Xaml.Controls.Page";
            _typeNameTable[11] = "Microsoft.UI.Xaml.Controls.UserControl";
            _typeNameTable[12] = "OpenLibrary.ViewModels.MainPageViewModel";
            _typeNameTable[13] = "System.Windows.Input.ICommand";
            _typeNameTable[14] = "System.Collections.Generic.List`1<OpenLibrary.Models.Book>";
            _typeNameTable[15] = "String";
            _typeNameTable[16] = "System.Collections.Generic.List`1<OpenLibrary.Models.Author>";
            _typeNameTable[17] = "OpenLibrary.Models.Author";
            _typeNameTable[18] = "Int32";
            _typeNameTable[19] = "System.Collections.Generic.List`1<String>";
            _typeNameTable[20] = "OpenLibrary.ViewModels.SearchParameters";
            _typeNameTable[21] = "OpenLibrary.Views.MainPage";
            _typeNameTable[22] = "Microsoft.UI.Xaml.Controls.TreeViewNode";
            _typeNameTable[23] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[24] = "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>";

            _typeTable = new global::System.Type[25];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::OpenLibrary.MainWindow);
            _typeTable[5] = typeof(global::Microsoft.UI.Xaml.Window);
            _typeTable[6] = typeof(global::OpenLibrary.ViewModels.DetailsViewModel);
            _typeTable[7] = typeof(global::CommunityToolkit.Mvvm.ComponentModel.ObservableObject);
            _typeTable[8] = typeof(global::OpenLibrary.Models.Book);
            _typeTable[9] = typeof(global::OpenLibrary.Views.Details);
            _typeTable[10] = typeof(global::Microsoft.UI.Xaml.Controls.Page);
            _typeTable[11] = typeof(global::Microsoft.UI.Xaml.Controls.UserControl);
            _typeTable[12] = typeof(global::OpenLibrary.ViewModels.MainPageViewModel);
            _typeTable[13] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[14] = typeof(global::System.Collections.Generic.List<global::OpenLibrary.Models.Book>);
            _typeTable[15] = typeof(global::System.String);
            _typeTable[16] = typeof(global::System.Collections.Generic.List<global::OpenLibrary.Models.Author>);
            _typeTable[17] = typeof(global::OpenLibrary.Models.Author);
            _typeTable[18] = typeof(global::System.Int32);
            _typeTable[19] = typeof(global::System.Collections.Generic.List<global::System.String>);
            _typeTable[20] = typeof(global::OpenLibrary.ViewModels.SearchParameters);
            _typeTable[21] = typeof(global::OpenLibrary.Views.MainPage);
            _typeTable[22] = typeof(global::Microsoft.UI.Xaml.Controls.TreeViewNode);
            _typeTable[23] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[24] = typeof(global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.TreeViewNode>);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_4_MainWindow() { return new global::OpenLibrary.MainWindow(); }
        private object Activate_6_DetailsViewModel() { return new global::OpenLibrary.ViewModels.DetailsViewModel(); }
        private object Activate_8_Book() { return new global::OpenLibrary.Models.Book(); }
        private object Activate_9_Details() { return new global::OpenLibrary.Views.Details(); }
        private object Activate_12_MainPageViewModel() { return new global::OpenLibrary.ViewModels.MainPageViewModel(); }
        private object Activate_14_List() { return new global::System.Collections.Generic.List<global::OpenLibrary.Models.Book>(); }
        private object Activate_16_List() { return new global::System.Collections.Generic.List<global::OpenLibrary.Models.Author>(); }
        private object Activate_17_Author() { return new global::OpenLibrary.Models.Author(); }
        private object Activate_19_List() { return new global::System.Collections.Generic.List<global::System.String>(); }
        private object Activate_20_SearchParameters() { return new global::OpenLibrary.ViewModels.SearchParameters(); }
        private object Activate_21_MainPage() { return new global::OpenLibrary.Views.MainPage(); }
        private object Activate_22_TreeViewNode() { return new global::Microsoft.UI.Xaml.Controls.TreeViewNode(); }
        private void MapAdd_0_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_14_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::OpenLibrary.Models.Book>)instance;
            var newItem = (global::OpenLibrary.Models.Book)item;
            collection.Add(newItem);
        }
        private void VectorAdd_16_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::OpenLibrary.Models.Author>)instance;
            var newItem = (global::OpenLibrary.Models.Author)item;
            collection.Add(newItem);
        }
        private void VectorAdd_19_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }
        private void VectorAdd_24_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Controls.TreeViewNode>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)item;
            collection.Add(newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_0_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  OpenLibrary.MainWindow
                userType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Window"));
                userType.Activator = Activate_4_MainWindow;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  OpenLibrary.ViewModels.DetailsViewModel
                userType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableObject"));
                userType.Activator = Activate_6_DetailsViewModel;
                userType.AddMemberName("Book");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  CommunityToolkit.Mvvm.ComponentModel.ObservableObject
                userType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 8:   //  OpenLibrary.Models.Book
                userType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_Book;
                userType.AddMemberName("Key");
                userType.AddMemberName("Title");
                userType.AddMemberName("Authors");
                userType.AddMemberName("AuthorNamesAsString");
                userType.AddMemberName("Description");
                userType.AddMemberName("FirstPublishYear");
                userType.AddMemberName("FirstPublishDate");
                userType.AddMemberName("Subjects");
                userType.AddMemberName("SubjectsAsString");
                userType.AddMemberName("CoverId");
                userType.AddMemberName("CoverImageUrl");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  OpenLibrary.Views.Details
                userType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_9_Details;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  Microsoft.UI.Xaml.Controls.Page
                xamlType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Microsoft.UI.Xaml.Controls.UserControl
                xamlType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  OpenLibrary.ViewModels.MainPageViewModel
                userType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableObject"));
                userType.Activator = Activate_12_MainPageViewModel;
                userType.AddMemberName("LoadCommand");
                userType.AddMemberName("SearchCommand");
                userType.AddMemberName("Books");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  System.Windows.Input.ICommand
                userType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  System.Collections.Generic.List`1<OpenLibrary.Models.Book>
                userType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_14_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 15:   //  String
                xamlType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  System.Collections.Generic.List`1<OpenLibrary.Models.Author>
                userType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_16_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  OpenLibrary.Models.Author
                userType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_17_Author;
                userType.AddMemberName("Key");
                userType.AddMemberName("Name");
                userType.AddMemberName("Link");
                userType.AddMemberName("BirthDate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  Int32
                xamlType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  System.Collections.Generic.List`1<String>
                userType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_19_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 20:   //  OpenLibrary.ViewModels.SearchParameters
                userType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_20_SearchParameters;
                userType.AddMemberName("SearchText");
                userType.AddMemberName("SearchAuthor");
                userType.AddMemberName("SearchLanguage");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  OpenLibrary.Views.MainPage
                userType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_21_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Microsoft.UI.Xaml.Controls.TreeViewNode
                userType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_22_TreeViewNode;
                userType.AddMemberName("Children");
                userType.AddMemberName("Content");
                userType.AddMemberName("Depth");
                userType.AddMemberName("HasChildren");
                userType.AddMemberName("HasUnrealizedChildren");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("Parent");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 23:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>
                userType = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_24_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_DetailsViewModel_Book(object instance)
        {
            var that = (global::OpenLibrary.ViewModels.DetailsViewModel)instance;
            return that.Book;
        }
        private void set_1_DetailsViewModel_Book(object instance, object Value)
        {
            var that = (global::OpenLibrary.ViewModels.DetailsViewModel)instance;
            that.Book = (global::OpenLibrary.Models.Book)Value;
        }
        private object get_2_MainPageViewModel_LoadCommand(object instance)
        {
            var that = (global::OpenLibrary.ViewModels.MainPageViewModel)instance;
            return that.LoadCommand;
        }
        private object get_3_MainPageViewModel_SearchCommand(object instance)
        {
            var that = (global::OpenLibrary.ViewModels.MainPageViewModel)instance;
            return that.SearchCommand;
        }
        private object get_4_MainPageViewModel_Books(object instance)
        {
            var that = (global::OpenLibrary.ViewModels.MainPageViewModel)instance;
            return that.Books;
        }
        private void set_4_MainPageViewModel_Books(object instance, object Value)
        {
            var that = (global::OpenLibrary.ViewModels.MainPageViewModel)instance;
            that.Books = (global::System.Collections.Generic.List<global::OpenLibrary.Models.Book>)Value;
        }
        private object get_5_Book_Key(object instance)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            return that.Key;
        }
        private void set_5_Book_Key(object instance, object Value)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            that.Key = (global::System.String)Value;
        }
        private object get_6_Book_Title(object instance)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            return that.Title;
        }
        private void set_6_Book_Title(object instance, object Value)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_7_Book_Authors(object instance)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            return that.Authors;
        }
        private void set_7_Book_Authors(object instance, object Value)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            that.Authors = (global::System.Collections.Generic.List<global::OpenLibrary.Models.Author>)Value;
        }
        private object get_8_Author_Key(object instance)
        {
            var that = (global::OpenLibrary.Models.Author)instance;
            return that.Key;
        }
        private void set_8_Author_Key(object instance, object Value)
        {
            var that = (global::OpenLibrary.Models.Author)instance;
            that.Key = (global::System.String)Value;
        }
        private object get_9_Author_Name(object instance)
        {
            var that = (global::OpenLibrary.Models.Author)instance;
            return that.Name;
        }
        private void set_9_Author_Name(object instance, object Value)
        {
            var that = (global::OpenLibrary.Models.Author)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_10_Author_Link(object instance)
        {
            var that = (global::OpenLibrary.Models.Author)instance;
            return that.Link;
        }
        private void set_10_Author_Link(object instance, object Value)
        {
            var that = (global::OpenLibrary.Models.Author)instance;
            that.Link = (global::System.String)Value;
        }
        private object get_11_Author_BirthDate(object instance)
        {
            var that = (global::OpenLibrary.Models.Author)instance;
            return that.BirthDate;
        }
        private void set_11_Author_BirthDate(object instance, object Value)
        {
            var that = (global::OpenLibrary.Models.Author)instance;
            that.BirthDate = (global::System.Int32)Value;
        }
        private object get_12_Book_AuthorNamesAsString(object instance)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            return that.AuthorNamesAsString;
        }
        private object get_13_Book_Description(object instance)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            return that.Description;
        }
        private void set_13_Book_Description(object instance, object Value)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            that.Description = (global::System.String)Value;
        }
        private object get_14_Book_FirstPublishYear(object instance)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            return that.FirstPublishYear;
        }
        private void set_14_Book_FirstPublishYear(object instance, object Value)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            that.FirstPublishYear = (global::System.Int32)Value;
        }
        private object get_15_Book_FirstPublishDate(object instance)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            return that.FirstPublishDate;
        }
        private void set_15_Book_FirstPublishDate(object instance, object Value)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            that.FirstPublishDate = (global::System.String)Value;
        }
        private object get_16_Book_Subjects(object instance)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            return that.Subjects;
        }
        private void set_16_Book_Subjects(object instance, object Value)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            that.Subjects = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_17_Book_SubjectsAsString(object instance)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            return that.SubjectsAsString;
        }
        private object get_18_Book_CoverId(object instance)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            return that.CoverId;
        }
        private void set_18_Book_CoverId(object instance, object Value)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            that.CoverId = (global::System.String)Value;
        }
        private object get_19_Book_CoverImageUrl(object instance)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            return that.CoverImageUrl;
        }
        private void set_19_Book_CoverImageUrl(object instance, object Value)
        {
            var that = (global::OpenLibrary.Models.Book)instance;
            that.CoverImageUrl = (global::System.String)Value;
        }
        private object get_20_SearchParameters_SearchText(object instance)
        {
            var that = (global::OpenLibrary.ViewModels.SearchParameters)instance;
            return that.SearchText;
        }
        private void set_20_SearchParameters_SearchText(object instance, object Value)
        {
            var that = (global::OpenLibrary.ViewModels.SearchParameters)instance;
            that.SearchText = (global::System.String)Value;
        }
        private object get_21_SearchParameters_SearchAuthor(object instance)
        {
            var that = (global::OpenLibrary.ViewModels.SearchParameters)instance;
            return that.SearchAuthor;
        }
        private void set_21_SearchParameters_SearchAuthor(object instance, object Value)
        {
            var that = (global::OpenLibrary.ViewModels.SearchParameters)instance;
            that.SearchAuthor = (global::System.String)Value;
        }
        private object get_22_SearchParameters_SearchLanguage(object instance)
        {
            var that = (global::OpenLibrary.ViewModels.SearchParameters)instance;
            return that.SearchLanguage;
        }
        private void set_22_SearchParameters_SearchLanguage(object instance, object Value)
        {
            var that = (global::OpenLibrary.ViewModels.SearchParameters)instance;
            that.SearchLanguage = (global::System.String)Value;
        }
        private object get_23_TreeViewNode_Children(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Children;
        }
        private object get_24_TreeViewNode_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Content;
        }
        private void set_24_TreeViewNode_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_25_TreeViewNode_Depth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Depth;
        }
        private object get_26_TreeViewNode_HasChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasChildren;
        }
        private object get_27_TreeViewNode_HasUnrealizedChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasUnrealizedChildren;
        }
        private void set_27_TreeViewNode_HasUnrealizedChildren(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.HasUnrealizedChildren = (global::System.Boolean)Value;
        }
        private object get_28_TreeViewNode_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.IsExpanded;
        }
        private void set_28_TreeViewNode_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_29_TreeViewNode_Parent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Parent;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember xamlMember = null;
            global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "OpenLibrary.ViewModels.DetailsViewModel.Book":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.ViewModels.DetailsViewModel");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "Book", "OpenLibrary.Models.Book");
                xamlMember.Getter = get_1_DetailsViewModel_Book;
                xamlMember.Setter = set_1_DetailsViewModel_Book;
                break;
            case "OpenLibrary.ViewModels.MainPageViewModel.LoadCommand":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.ViewModels.MainPageViewModel");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "LoadCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_2_MainPageViewModel_LoadCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "OpenLibrary.ViewModels.MainPageViewModel.SearchCommand":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.ViewModels.MainPageViewModel");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "SearchCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_3_MainPageViewModel_SearchCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "OpenLibrary.ViewModels.MainPageViewModel.Books":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.ViewModels.MainPageViewModel");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "Books", "System.Collections.Generic.List`1<OpenLibrary.Models.Book>");
                xamlMember.Getter = get_4_MainPageViewModel_Books;
                xamlMember.Setter = set_4_MainPageViewModel_Books;
                break;
            case "OpenLibrary.Models.Book.Key":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.Models.Book");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "Key", "String");
                xamlMember.Getter = get_5_Book_Key;
                xamlMember.Setter = set_5_Book_Key;
                break;
            case "OpenLibrary.Models.Book.Title":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.Models.Book");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_6_Book_Title;
                xamlMember.Setter = set_6_Book_Title;
                break;
            case "OpenLibrary.Models.Book.Authors":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.Models.Book");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "Authors", "System.Collections.Generic.List`1<OpenLibrary.Models.Author>");
                xamlMember.Getter = get_7_Book_Authors;
                xamlMember.Setter = set_7_Book_Authors;
                break;
            case "OpenLibrary.Models.Author.Key":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.Models.Author");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "Key", "String");
                xamlMember.Getter = get_8_Author_Key;
                xamlMember.Setter = set_8_Author_Key;
                break;
            case "OpenLibrary.Models.Author.Name":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.Models.Author");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_9_Author_Name;
                xamlMember.Setter = set_9_Author_Name;
                break;
            case "OpenLibrary.Models.Author.Link":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.Models.Author");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "Link", "String");
                xamlMember.Getter = get_10_Author_Link;
                xamlMember.Setter = set_10_Author_Link;
                break;
            case "OpenLibrary.Models.Author.BirthDate":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.Models.Author");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "BirthDate", "Int32");
                xamlMember.Getter = get_11_Author_BirthDate;
                xamlMember.Setter = set_11_Author_BirthDate;
                break;
            case "OpenLibrary.Models.Book.AuthorNamesAsString":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.Models.Book");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "AuthorNamesAsString", "String");
                xamlMember.Getter = get_12_Book_AuthorNamesAsString;
                xamlMember.SetIsReadOnly();
                break;
            case "OpenLibrary.Models.Book.Description":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.Models.Book");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "Description", "String");
                xamlMember.Getter = get_13_Book_Description;
                xamlMember.Setter = set_13_Book_Description;
                break;
            case "OpenLibrary.Models.Book.FirstPublishYear":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.Models.Book");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "FirstPublishYear", "Int32");
                xamlMember.Getter = get_14_Book_FirstPublishYear;
                xamlMember.Setter = set_14_Book_FirstPublishYear;
                break;
            case "OpenLibrary.Models.Book.FirstPublishDate":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.Models.Book");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "FirstPublishDate", "String");
                xamlMember.Getter = get_15_Book_FirstPublishDate;
                xamlMember.Setter = set_15_Book_FirstPublishDate;
                break;
            case "OpenLibrary.Models.Book.Subjects":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.Models.Book");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "Subjects", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_16_Book_Subjects;
                xamlMember.Setter = set_16_Book_Subjects;
                break;
            case "OpenLibrary.Models.Book.SubjectsAsString":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.Models.Book");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "SubjectsAsString", "String");
                xamlMember.Getter = get_17_Book_SubjectsAsString;
                xamlMember.SetIsReadOnly();
                break;
            case "OpenLibrary.Models.Book.CoverId":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.Models.Book");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "CoverId", "String");
                xamlMember.Getter = get_18_Book_CoverId;
                xamlMember.Setter = set_18_Book_CoverId;
                break;
            case "OpenLibrary.Models.Book.CoverImageUrl":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.Models.Book");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "CoverImageUrl", "String");
                xamlMember.Getter = get_19_Book_CoverImageUrl;
                xamlMember.Setter = set_19_Book_CoverImageUrl;
                break;
            case "OpenLibrary.ViewModels.SearchParameters.SearchText":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.ViewModels.SearchParameters");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "SearchText", "String");
                xamlMember.Getter = get_20_SearchParameters_SearchText;
                xamlMember.Setter = set_20_SearchParameters_SearchText;
                break;
            case "OpenLibrary.ViewModels.SearchParameters.SearchAuthor":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.ViewModels.SearchParameters");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "SearchAuthor", "String");
                xamlMember.Getter = get_21_SearchParameters_SearchAuthor;
                xamlMember.Setter = set_21_SearchParameters_SearchAuthor;
                break;
            case "OpenLibrary.ViewModels.SearchParameters.SearchLanguage":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenLibrary.ViewModels.SearchParameters");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "SearchLanguage", "String");
                xamlMember.Getter = get_22_SearchParameters_SearchLanguage;
                xamlMember.Setter = set_22_SearchParameters_SearchLanguage;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Children":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "Children", "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>");
                xamlMember.Getter = get_23_TreeViewNode_Children;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Content":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_TreeViewNode_Content;
                xamlMember.Setter = set_24_TreeViewNode_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Depth":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "Depth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_TreeViewNode_Depth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasChildren":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "HasChildren", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_TreeViewNode_HasChildren;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasUnrealizedChildren":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "HasUnrealizedChildren", "Boolean");
                xamlMember.Getter = get_27_TreeViewNode_HasUnrealizedChildren;
                xamlMember.Setter = set_27_TreeViewNode_HasUnrealizedChildren;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.IsExpanded":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_TreeViewNode_IsExpanded;
                xamlMember.Setter = set_28_TreeViewNode_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Parent":
                userType = (global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlMember(this, "Parent", "Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember.Getter = get_29_TreeViewNode_Parent;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2309")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2309")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                long value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    long enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt64(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(this.UnderlyingType));
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2309")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::OpenLibrary.OpenLibrary_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

